#!/bin/bash
# Generate a memorable 8.3 password.
# Generate a four-word pass-phrase.

memorable_password() {
   length=${1?-Password length required}
   VOWELS="aeiou"
   CONSONANTS="bcdfghjklmnpqrstvwxyz"

   n=1
   password=""
   while [ "${n}" -le "$length" ]; do
      # $RANDOM generates a random number from 0 to 32767
      # $RANDOM % n leaves the remainder of division, from 0 to n-1
      # String-slicing in Bash is zero-indexed,
      # so here we take one consonant and one vowel.
      consonant="${CONSONANTS:$(($RANDOM % ${#CONSONANTS})):1}"
      vowel="${VOWELS:$(($RANDOM % ${#VOWELS})):1}"
      password="$password$consonant$vowel"
      let n+=2
   done
   password=${password:0:$length}
   echo -n $password
}

random_number_string() {
   length=${1?-Random number string length required}
   string=000000000000$(($RANDOM % 1000))
   string=${string:(-$length)}
   echo -n $string
}

passphrase() {
   length=${1?-Number of words required}
   look . | grep -E "^[a-z][a-zA-Z]{3,8}$" | shuf | head -$length | tr '\n' ' '
}

echo " Username: $(memorable_password 8)               27 bits"
echo " Web-safe: $(memorable_password 8)$(random_number_string 3)            36 bits = 2 years @ 1000/sec (remote web attack)"
echo "Hash-safe: $(memorable_password 16)$(random_number_string 3)    63 bits = 290 million years @ 1000/sec"
echo "                                          = 290 years @ 10^9/sec (hash attack)"

# Also generate a 6-word pass-phrase.
# 4-9 letter words, no proper nouns, total 43636 = 4.6 decimal digits, 15.4 bits
# A 4-word pass-phrase (61 bits) = 73 years @ 10^9/sec (hash-attack)
# A 5-word pass-phrase (77 bits) = 4800 thousand years @ 10^9/sec
passphrase4=$(passphrase 4)
echo $passphrase4
echo "$(echo $passphrase4 | sed 's# ##g')        61 bits = 73 years @ 10^9/sec"
passphrase5=$(passphrase 5)
echo $passphrase5
echo "$(echo $passphrase5 | sed 's# ##g')        77 bits = 4800 thousand years @ 10^9/sec"

